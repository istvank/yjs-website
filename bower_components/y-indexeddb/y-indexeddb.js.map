{"version":3,"sources":["../yjs/node_modules/browserify/node_modules/browser-pack/_prelude.js","src/IndexedDB.js"],"names":[],"mappingsfile":"y-indexeddb.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* global Y */\n'use strict'\n\nfunction extend (Y) {\n  class Store {\n    constructor (transaction, name) {\n      this.store = transaction.objectStore(name)\n    }\n    * find (id) {\n      return yield this.store.get(id)\n    }\n    * put (v) {\n      yield this.store.put(v)\n    }\n    * delete (id) {\n      yield this.store.delete(id)\n    }\n    * findWithLowerBound (start) {\n      return yield this.store.openCursor(window.IDBKeyRange.lowerBound(start))\n    }\n    * findWithUpperBound (end) {\n      return yield this.store.openCursor(window.IDBKeyRange.upperBound(end), 'prev')\n    }\n    * findNext (id) {\n      return yield* this.findWithLowerBound([id[0], id[1] + 1])\n    }\n    * findPrev (id) {\n      return yield* this.findWithUpperBound([id[0], id[1] - 1])\n    }\n    * iterate (t, start, end, gen) {\n      var range = null\n      if (start != null && end != null) {\n        range = window.IDBKeyRange.bound(start, end)\n      } else if (start != null) {\n        range = window.IDBKeyRange.lowerBound(start)\n      } else if (end != null) {\n        range = window.IDBKeyRange.upperBound(end)\n      }\n      var cursorResult = this.store.openCursor(range)\n      while ((yield cursorResult) != null) {\n        yield* gen.call(t, cursorResult.result.value)\n        cursorResult.result.continue()\n      }\n    }\n\n  }\n  class Transaction extends Y.Transaction {\n    constructor (store) {\n      super(store)\n      var transaction = store.db.transaction(['OperationStore', 'StateStore', 'DeleteStore'], 'readwrite')\n      this.store = store\n      this.ss = new Store(transaction, 'StateStore')\n      this.os = new Store(transaction, 'OperationStore')\n      this.ds = new Store(transaction, 'DeleteStore')\n    }\n  }\n  class OperationStore extends Y.AbstractDatabase {\n    constructor (y, opts) {\n      super(y, opts)\n      if (opts == null) {\n        opts = {}\n      }\n      if (opts.namespace == null || typeof opts.namespace !== 'string') {\n        throw new Error('IndexedDB: expect a string (opts.namespace)!')\n      } else {\n        this.namespace = opts.namespace\n      }\n      if (opts.idbVersion != null) {\n        this.idbVersion = opts.idbVersion\n      } else {\n        this.idbVersion = 5\n      }\n      var store = this\n      // initialize database!\n      this.requestTransaction(function * () {\n        store.db = yield window.indexedDB.open(opts.namespace, store.idbVersion)\n      })\n      if (opts.cleanStart) {\n        this.requestTransaction(function * () {\n          yield this.os.store.clear()\n          yield this.ds.store.clear()\n          yield this.ss.store.clear()\n        })\n      }\n      var operationsToAdd = []\n      window.addEventListener('storage', function (event) {\n        if (event.key === '__YJS__' + store.namespace) {\n          operationsToAdd.push(event.newValue)\n          if (operationsToAdd.length === 1) {\n            store.requestTransaction(function * () {\n              var add = operationsToAdd\n              operationsToAdd = []\n              for (var i in add) {\n                // don't call the localStorage event twice..\n                var op = JSON.parse(add[i])\n                if (op.struct !== 'Delete') {\n                  op = yield* this.getOperation(op.id)\n                }\n                yield* this.store.operationAdded(this, op, true)\n              }\n            })\n          }\n        }\n      }, false)\n    }\n    * operationAdded (transaction, op, noAdd) {\n      yield* super.operationAdded(transaction, op)\n      if (!noAdd) {\n        window.localStorage['__YJS__' + this.namespace] = JSON.stringify(op)\n      }\n    }\n    transact (makeGen) {\n      var transaction = this.db != null ? new Transaction(this) : null\n      var store = this\n\n      var gen = makeGen.call(transaction)\n      handleTransactions(gen.next())\n\n      function handleTransactions (result) {\n        var request = result.value\n        if (result.done) {\n          makeGen = store.getNextRequest()\n          if (makeGen != null) {\n            if (transaction == null && store.db != null) {\n              transaction = new Transaction(store)\n            }\n            gen = makeGen.call(transaction)\n            handleTransactions(gen.next())\n          } // else no transaction in progress!\n          return\n        }\n        if (request.constructor === window.IDBRequest) {\n          request.onsuccess = function () {\n            var res = request.result\n            if (res != null && res.constructor === window.IDBCursorWithValue) {\n              res = res.value\n            }\n            handleTransactions(gen.next(res))\n          }\n          request.onerror = function (err) {\n            gen.throw(err)\n          }\n        } else if (request.constructor === window.IDBCursor) {\n          request.onsuccess = function () {\n            handleTransactions(gen.next(request.result != null ? request.result.value : null))\n          }\n          request.onerror = function (err) {\n            gen.throw(err)\n          }\n        } else if (request.constructor === window.IDBOpenDBRequest) {\n          request.onsuccess = function (event) {\n            var db = event.target.result\n            handleTransactions(gen.next(db))\n          }\n          request.onerror = function () {\n            gen.throw(\"Couldn't open IndexedDB database!\")\n          }\n          request.onupgradeneeded = function (event) {\n            var db = event.target.result\n            try {\n              db.createObjectStore('OperationStore', {keyPath: 'id'})\n              db.createObjectStore('DeleteStore', {keyPath: 'id'})\n              db.createObjectStore('StateStore', {keyPath: 'id'})\n            } catch (e) {\n              console.log('Store already exists!')\n            }\n          }\n        } else {\n          gen.throw('You must not yield this type!')\n        }\n      }\n    }\n    // TODO: implement \"free\"..\n    * destroy () {\n      this.db.close()\n      yield window.indexedDB.deleteDatabase(this.namespace)\n    }\n  }\n  Y.extend('indexeddb', OperationStore)\n}\n\nif (typeof Y !== 'undefined') {\n  extend(Y)\n} else {\n  module.exports = extend\n}\n"]}